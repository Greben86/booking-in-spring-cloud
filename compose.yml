version: "3.8"
services:
  configuration:
    container_name: configuration-service
    build:
      dockerfile_inline: |
        FROM eclipse-temurin:21-jre-alpine-3.22
        COPY ./module-configuration/target/*.jar app.jar
        ENTRYPOINT ["java", "-jar", "app.jar"]
    environment:
      PORT_SERVICE: 8888
#      DB_URL: jdbc:postgresql://postgres:5432/hakaton_db
#      DB_USERNAME: admin
#      DB_PASSWORD: admin
    ports:
      - "8888:8888"
#    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          cpus: '4'
#          memory: 1G
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://configuration:8888/actuator/health"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 10s
    networks:
      - booking-network

  gateway:
    container_name: gateway-service
    build:
      dockerfile_inline: |
        FROM eclipse-temurin:21-jre-alpine-3.22
        COPY ./module-gateway/target/*.jar app.jar
        ENTRYPOINT ["java", "-jar", "app.jar"]
    environment:
      PORT_SERVICE: 8080
      DB_URL: jdbc:postgresql://postgres:5432/hakaton_db
      DB_USERNAME: admin
      DB_PASSWORD: admin
    ports:
      - "8080:8080"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 1G
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://gateway-service:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      - configuration
    networks:
      - booking-network

  prometheus:
    image: prom/prometheus:latest
    user: root
    volumes:
      - './config/prometheus/:/etc/prometheus/'
    container_name: prometheus
    hostname: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-admin-api'
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    networks:
      - booking-network
    depends_on:
      - configuration

  grafana:
    image: grafana/grafana:latest
    user: root
    ports:
      - "3000:3000"
    volumes:
      - "./config/grafana/datasources/prometheus_ds.yml:/etc/grafana/provisioning/datasources/prometheus_ds.yml"
      - "./config/grafana/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml"
      - "./config/grafana/prometheus:/var/lib/grafana/dashboards/prometheus"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --tries=1 -O- http://grafana:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - booking-network
    depends_on:
      - configuration
      - prometheus

volumes:
  hakaton_db-data:
  pgadmin-data:

networks:
  booking-network:
    driver: bridge
